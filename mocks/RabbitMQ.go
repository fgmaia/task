// Code generated by mockery v2.10.1. DO NOT EDIT.

package mocks

import (
	context "context"

	amqp "github.com/streadway/amqp"

	mock "github.com/stretchr/testify/mock"
)

// RabbitMQ is an autogenerated mock type for the RabbitMQ type
type RabbitMQ struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *RabbitMQ) Close() {
	_m.Called()
}

// Consume provides a mock function with given fields: ctx
func (_m *RabbitMQ) Consume(ctx context.Context) (<-chan amqp.Delivery, error) {
	ret := _m.Called(ctx)

	var r0 <-chan amqp.Delivery
	if rf, ok := ret.Get(0).(func(context.Context) <-chan amqp.Delivery); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan amqp.Delivery)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitQueue provides a mock function with given fields: ctx
func (_m *RabbitMQ) InitQueue(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Publish provides a mock function with given fields: ctx, dados
func (_m *RabbitMQ) Publish(ctx context.Context, dados []byte) error {
	ret := _m.Called(ctx, dados)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) error); ok {
		r0 = rf(ctx, dados)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
