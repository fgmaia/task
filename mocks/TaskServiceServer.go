// Code generated by mockery v2.10.1. DO NOT EDIT.

package mocks

import (
	context "context"

	taskpb "github.com/fgmaia/task/pb/taskpb"
	mock "github.com/stretchr/testify/mock"
)

// TaskServiceServer is an autogenerated mock type for the TaskServiceServer type
type TaskServiceServer struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: _a0, _a1
func (_m *TaskServiceServer) CreateTask(_a0 context.Context, _a1 *taskpb.CreateTaskRequest) (*taskpb.CreateTaskResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *taskpb.CreateTaskResponse
	if rf, ok := ret.Get(0).(func(context.Context, *taskpb.CreateTaskRequest) *taskpb.CreateTaskResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*taskpb.CreateTaskResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *taskpb.CreateTaskRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTask provides a mock function with given fields: _a0, _a1
func (_m *TaskServiceServer) FindTask(_a0 context.Context, _a1 *taskpb.FindTaskRequest) (*taskpb.FindTaskResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *taskpb.FindTaskResponse
	if rf, ok := ret.Get(0).(func(context.Context, *taskpb.FindTaskRequest) *taskpb.FindTaskResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*taskpb.FindTaskResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *taskpb.FindTaskRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTasks provides a mock function with given fields: _a0, _a1
func (_m *TaskServiceServer) ListTasks(_a0 *taskpb.ListTaskRequest, _a1 taskpb.TaskService_ListTasksServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*taskpb.ListTaskRequest, taskpb.TaskService_ListTasksServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Login provides a mock function with given fields: _a0, _a1
func (_m *TaskServiceServer) Login(_a0 context.Context, _a1 *taskpb.LoginRequest) (*taskpb.LoginResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *taskpb.LoginResponse
	if rf, ok := ret.Get(0).(func(context.Context, *taskpb.LoginRequest) *taskpb.LoginResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*taskpb.LoginResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *taskpb.LoginRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadImage provides a mock function with given fields: _a0
func (_m *TaskServiceServer) UploadImage(_a0 taskpb.TaskService_UploadImageServer) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(taskpb.TaskService_UploadImageServer) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mustEmbedUnimplementedTaskServiceServer provides a mock function with given fields:
func (_m *TaskServiceServer) mustEmbedUnimplementedTaskServiceServer() {
	_m.Called()
}
