// Code generated by mockery v2.10.1. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/fgmaia/task/internal/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// TaskRepository is an autogenerated mock type for the TaskRepository type
type TaskRepository struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: ctx, entity
func (_m *TaskRepository) CreateTask(ctx context.Context, entity *entities.Task) error {
	ret := _m.Called(ctx, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Task) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindTask provides a mock function with given fields: ctx, id
func (_m *TaskRepository) FindTask(ctx context.Context, id string) (*entities.Task, error) {
	ret := _m.Called(ctx, id)

	var r0 *entities.Task
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.Task); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTask provides a mock function with given fields: ctx, found
func (_m *TaskRepository) ListTask(ctx context.Context, found func(*entities.Task) error) error {
	ret := _m.Called(ctx, found)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(*entities.Task) error) error); ok {
		r0 = rf(ctx, found)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
